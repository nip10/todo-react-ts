NOW:
  ☐ Add types to stuff that has :any

Roadmap:
  ☐ v2 - Add redux @today
    ✔ Create actions/reducers @done(18-10-07 18:04)
      ✔ Add todo @done(18-10-06 22:54)
      ✔ Delete todo @done(18-10-06 22:54)
      ✔ Toggle todo @done(18-10-07 18:04)
      ✔ Edit todo @done(18-10-07 18:04)
    ☐ Persist data (redux-persist)
      https://www.npmjs.com/package/redux-persist
      from dan ab:
        https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage?course=building-react-applications-with-idiomatic-redux
  ☐ v3 - Add todo-api
    ☐ Add authentication
      - This HAS to be the 1st step on adding the api because we can't do anything without being authenticated
      Actions need to be separated from authenticated and unauthenticated user.
      The only difference between those users is where the data is being saved (localstorage -
    only available on that device; db - available everywhere)
      Note that authentication is already built into the backend using JWT.
      ☐ Signup
      ☐ Login
    Note: In this version, we (kinda) stop using localstorage (to query - data is still updated).
    ☐ When the page loads, check if there are todo's in the database
      ☐ If yes, add them to the UI
      ☐ If not, show a message "Add your first todo !"
    ☐ Every action (add/remove/edit/toggle) should (also) be saved to the database
  ☐ v4 - Use both localstorage AND database
    ☐ Add a timestamp to localstorage
    ☐ When loading the page, check if the timestamp is more than X mins/hours
      ☐ If yes, go to the DB
      ☐ If not, just get the items from localstorage
  ☐ v5 - Add offline persistance
    IndexedDB

Deploy:
  ☐ Add google analytics @low
    ☐ Look for a react component to get extra data ?

    ☐ Code snippet for axios
  interface Ifoo {
    data: {
      todos: ITodoApi[],
    }
  }

  interface ITodoApi {
    _id: number,
    text: string,
    completed: boolean,
    completedAt: string,
  }

  export const Todos: ITodos = {
    items: [],
    // populate() {
    //   if (localStorage.hasOwnProperty('todos')) {
    //     const todos = localStorage.getItem('todos');
    //     if (todos) {
    //       try {
    //         this.items = JSON.parse(todos);
    //       } catch (e) {
    //         this.items = [];
    //       }
    //     }
    //   }
    // },
    async populate() {
      const { data } :Ifoo = await axios.get('https://jsonplaceholder.typicode.com/todos');
      // const foo: ITodoApi = response.data;
      console.log('data: ', data);
      this.items = data.todos.map(todo => ({
        id: todo._id,
        text: todo.text,
        completed: todo.completed,
        completedAt: todo.completedAt,
        createdAt: '',
        updatedAt: '',
      }));
      this.items = [];
    },